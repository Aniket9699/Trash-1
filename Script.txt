import groovy.json.JsonSlurper
import javax.net.ssl.SSLContext
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import org.apache.http.conn.ssl.NoopHostnameVerifier
import org.apache.http.conn.ssl.SSLConnectionSocketFactory
import org.apache.http.conn.ssl.TrustSelfSignedStrategy
import org.apache.http.impl.client.HttpClients
import org.apache.http.ssl.SSLContexts
import org.apache.http.ssl.TrustStrategy

// Set the Panorama server URL, username, and password
def baseUrl = "https://10.0.247.164"
def username = "SAUD394101"
def password = "@31NHrge"

// Set the IP address or hostname for which we want to retrieve the firewall rules
def target = "10.0.45.90"

// Create a custom SSL context that trusts self-signed certificates
def trustAllCerts = new TrustManager[] { new X509TrustManager() {
    public X509Certificate[] getAcceptedIssuers() { null }
    public void checkClientTrusted(X509Certificate[] certs, String authType) { }
    public void checkServerTrusted(X509Certificate[] certs, String authType) { }
} }
def sslContext = SSLContexts.custom()
    .loadTrustMaterial(null, new TrustSelfSignedStrategy())
    .build()
SSLConnectionSocketFactory.setDefaultHostnameVerifier(NoopHostnameVerifier.INSTANCE)

// Create the HTTP client and authenticate with the Panorama server
def http = HttpClients.custom()
    .setSSLContext(sslContext)
    .build()
def authHeader = "Basic " + "${username}:${password}".bytes.encodeBase64().toString()
def headers = [
    "Authorization": authHeader,
    "Content-Type": "application/json"
]

// Define the API endpoint and parameters to retrieve the firewall rules
def endpoint = "/restapi/9.1/Objects/SecurityRules"
def params = [
    "location": "shared",
    "paging": {
        "page_size": 5000,
        "offset": 0
    },
    "query": {
        "operator": "or",
        "children": [
            
                "field": "source",
                "operator": "is",
                "value": "10.0.45.90",
            {
                "field": "destination",
                "operator": "is",
                "value": "10.0.45.90"
            }
        ]
    }
]

// Send the API request and parse the response JSON
def response = http.execute(new org.apache.http.client.methods.HttpPost("${baseUrl}${endpoint}")) {
    headers.each { name, value -> it.setHeader(name, value) }
    it.setEntity(new org.apache.http.entity.StringEntity(new JsonBuilder(params).toString()))
}.entity.content.text
def json = new JsonSlurper().parseText(response)

// Iterate over the firewall rules and print the relevant information for the target IP or hostname
json.result.forEach { rule ->
    println("Rule Name: ${rule.name}")
    println("Source IP: ${rule.source}")
    println("Destination IP: ${rule.destination}")
    println("Action: ${rule.action}")
    println("------")
}
